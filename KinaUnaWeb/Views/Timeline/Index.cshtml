@using KinaUnaWeb.Services
@using KinaUna.Data
@model KinaUnaWeb.Models.ItemViewModels.TimeLineViewModel
@inject ILocaleManager LocaleManager
@{
    ViewData["Title"] = Model.Progeny.NickName + " - " + await LocaleManager.GetTranslation("Timeline", PageNames.Timeline, Model.LanguageId);
    string newestFirstString = await LocaleManager.GetTranslation("Newest first", PageNames.Timeline, Model.LanguageId);
    string oldestFirstString = await LocaleManager.GetTranslation("Oldest first", PageNames.Timeline, Model.LanguageId);
    string sortString = await LocaleManager.GetTranslation("Sort:", PageNames.Timeline, Model.LanguageId);
}
<h2>@ViewData["Title"]</h2>
<br style="clear: both;" />
@{
    string sortOldest = "btn btn-primary btn-sm";
    string sortNewest = "btn btn-info btn-sm";
}
@if (Model.SortBy == 1)
{
    sortOldest = "btn btn-info btn-sm";
    sortNewest = "btn btn-primary btn-sm";
    <div>
        @sortString <span class="@sortNewest"><i class="fas fa-check-circle"></i> @newestFirstString</span>
        <a class="@sortOldest leavePage" asp-controller="TimeLine" asp-action="Index" asp-route-sortBy="0">@oldestFirstString</a>
    </div>
}
else
{
    <div>
        @sortString <span class="@sortOldest" disabled><i class="fas fa-check-circle"></i> @oldestFirstString</span>
        <a class="@sortNewest leavePage" asp-controller="TimeLine" asp-action="Index" asp-route-sortBy="1">@newestFirstString</a>
    </div>
}
<br />
<div id="tlineItems">

</div>
<div id="moreButtonDiv" style="clear: both;">
    <button class="btn btn-success" id="moreTimeLineItems" style="float: left; margin-top: 20px;">@await LocaleManager.GetTranslation("Show more", PageNames.Timeline, Model.LanguageId)</button>
    <br />
    <div class="col-md-3 col-lg-2" style="float: right; font-size: small;">
        @await LocaleManager.GetTranslation("Number of items to get:", PageNames.Timeline, Model.LanguageId)
        <select id="nextItemsCount" class="selectpicker form-control-noline" data-style="btn-kinaunaselect">
            <option value="5">5</option>
            <option value="10" selected="selected">10</option>
            <option value="15">15</option>
            <option value="20">20</option>
            <option value="30">30</option>
            <option value="50">50</option>
            <option value="100">100</option>
        </select>
    </div>
    <br style="clear: both;" />
</div>
<script type="text/javascript">
    let current_effect = 'roundBounce';

    function run_waitMe() {
        $('#moreButtonDiv').waitMe({
            effect: 'bounce',
            text: '',
            bg: 'rgba(255,255,255,0.7)',
            color: '#3a2051',
            maxSize: '',
            waitTime: -1,
            source: '',
            textPos: 'vertical',
            fontSize: '',
            onClose: function() {}
        });
    }

    function run_waitMeLoad() {
        $('body').waitMe({
            effect: 'roundBounce',
            text: '',
            bg: 'rgba(255,255,255,0.5)',
            color: '#3a2051',
            maxSize: '',
            waitTime: -1,
            source: '',
            textPos: 'vertical',
            fontSize: '',
            onClose: function () { }
        });
    }
    let currentItemNumber = 0;
    let maxNumber = @Model.TimeLineItems.Count;
    let sortBy = @Model.SortBy;
    @{
        string[] idNumbers = new String[Model.TimeLineItems.Count];
        int[] itmType = new int[Model.TimeLineItems.Count];
        int tiCount = 0;
        foreach (TimeLineItem tItm in Model.TimeLineItems)
        {
            idNumbers[tiCount] = tItm.ItemId;
            itmType[tiCount] = tItm.ItemType;
            tiCount++;
        }
    }
    let itemId = [@string.Join(",", idNumbers)];
    let itemType = [@string.Join(",", itmType)];
    let numItems = 10;
    let scrollTo = '#';
    $(document).ready(function() {
        async function getItemsHist() {
            run_waitMeLoad();
            let g;
            for (g = 0; g < @Model.Items; g++) {
                await getHistItem();
                $("#moreButtonDiv").waitMe("hide");

            };
            $('body').waitMe("hide");
            $('html, body').animate({
                'scrollTop': $(scrollTo).offset().top
            }, 2000);
        };

        async function getHistItem() {
            let timelineItemData = { typeId: itemType[currentItemNumber], itemId: itemId[currentItemNumber] };
            currentItemNumber++;
            await getTimeLineItemLoad(timelineItemData);
        };

        async function getNextItem() {
            let timelineItemData = { typeId: itemType[currentItemNumber], itemId: itemId[currentItemNumber] };
            currentItemNumber++;
            await getTimeLineItem(timelineItemData);
        };

        if (currentItemNumber < @Model.Items) {
            getItemsHist();


        } else {
            getNextSeriesItems();
        }

        $("#moreTimeLineItems").click(getNextSeriesItems);


        async function getNextSeriesItems() {
            let h;
            numItems = $("#nextItemsCount").val();
            for (h = 0; h < numItems; h++) {
                await getNextItem();
                $("#moreButtonDiv").waitMe("hide");
                if (currentItemNumber === maxNumber) {
                    $("#moreTimeLineItems").attr("disabled", "disabled");
                    $('#tlineItems').append("<div>@await LocaleManager.GetTranslation("No more data. All items have been listed now.", PageNames.Timeline, Model.LanguageId)<br/></div>");
                    return;

                }
            };
        }

        function getTimeLineItem(tData) {
            run_waitMe();
            return $.ajax({
                type: "GET",
                url: "/TimeLine/GetTimeLineItem",
                data: tData,
                datatype: "html",
                async: true,
                success: function(data) {
                    $('#tlineItems').append('<div class="addedDiv" style="display:none;"><span id="' +
                        tData.typeId +
                        tData.itemId +
                        '"></span>' +
                        data +
                        '</div>');
                    $('div.addedDiv').slideDown("slow");
                    window.history.replaceState("state",
                        "title",
                        "TimeLine?sortBy=" + sortBy + "&items=" + currentItemNumber);
                },
                error: function(jqXhr, textStatus, errorThrown) {
                    console.log(textStatus, errorThrown);
                }
            });
        }

        function getTimeLineItemLoad(tData) {
            run_waitMe();
            return $.ajax({
                type: "GET",
                url: "/TimeLine/GetTimeLineItem",
                data: tData,
                datatype: "html",
                async: true,
                success: function(data) {
                    $('#tlineItems').append('<div class="addedDiv" style="display:none;"><span id="' +
                        tData.typeId +
                        tData.itemId +
                        '"></span>' +
                        data +
                        '</div>');
                    $('div.addedDiv').slideDown("slow");
                    window.history.replaceState("state",
                        "title",
                        "TimeLine?sortBy=" + sortBy + "&items=" + currentItemNumber);
                    //$('html, body').animate({ scrollTop: $(document).height() }, 'slow');
                    scrollTo = '#' + tData.typeId + tData.itemId;
                },
                error: function (jqXhr, textStatus, errorThrown) {
                    console.log(textStatus, errorThrown);
                }
            });
        }
    });
</script>