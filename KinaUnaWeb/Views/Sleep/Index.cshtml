@using KinaUnaWeb.Services
@using KinaUna.Data
@model KinaUnaWeb.Models.ItemViewModels.SleepViewModel
@inject ILocaleManager LocaleManager
@{
    string sleepString = await LocaleManager.GetTranslation("Sleep", PageNames.Sleep, Model.LanguageId);
    string durationInHoursString = await LocaleManager.GetTranslation("Duration in hours", PageNames.Sleep, Model.LanguageId);
    ViewData["Title"] = Model.Progeny.NickName + " - " + sleepString;
}
@section Scripts
    {
    <link href="/lib/datatables/css/dataTables.bootstrap4.min.css" rel="stylesheet" />
    <script src="/lib/moment.min.js"></script>
    <script src="~/lib/material-kit/plugins/nouislider.min.js"></script>
    <script src="/lib/datatables/js/jquery.dataTables.min.js"></script>
    <script src="~/lib/datatables/js/dataTables.bootstrap4.min.js"></script>
    <script src="/lib/datatables/sorting/datetime-moment.js"></script>
}
@if (!Model.SleepList.Any())
{
    <h2>@ViewData["Title"]</h2>
    <div>
        @await LocaleManager.GetTranslation("Nothing to see here yet.", PageNames.Sleep, Model.LanguageId)
    </div>
}
else
{
    <div class="container">
        @if (Model.IsAdmin)
        {
            <div class="btn-group" style="float: right;">
                <a asp-controller="AddItem" asp-action="AddSleep" class="btn btn-success btn-round leavePage">
                    <i class="fas fa-plus"></i> @await LocaleManager.GetTranslation("Add sleep", PageNames.Sleep, Model.LanguageId)
                </a>
            </div>
        }
        <div class="btn-group" style="float: right; clear: right">
            <a asp-controller="Sleep" asp-action="SleepCalendar" asp-route-childId="@Model.ProgenyId" class="btn btn-primary leavePage">
                <i class="far fa-calendar-alt"></i> @await LocaleManager.GetTranslation("View sleep calendar", PageNames.Sleep, Model.LanguageId)
            </a>
        </div>
        <h2>@ViewData["Title"]</h2>
    </div>
    <div class="table-responsive">
        <table id="sleepList" class="table table-striped table-bordered" style="border-spacing: 0;">
            <thead>
            <tr>
                <th style="font-weight: bold">@await LocaleManager.GetTranslation("Start", PageNames.Sleep, Model.LanguageId)</th>
                <th style="font-weight: bold">@await LocaleManager.GetTranslation("End", PageNames.Sleep, Model.LanguageId)</th>
                <th style="font-weight: bold">@await LocaleManager.GetTranslation("Duration", PageNames.Sleep, Model.LanguageId)</th>
                <th style="font-weight: bold">@await LocaleManager.GetTranslation("Rating", PageNames.Sleep, Model.LanguageId)</th>
                <th style="font-weight: bold">@await LocaleManager.GetTranslation("Notes", PageNames.Sleep, Model.LanguageId)</th>
                @if (Model.IsAdmin)
                {
                    <th style="font-weight: bold">@await LocaleManager.GetTranslation("Action", PageNames.Sleep, Model.LanguageId)</th>
                }
            </tr>
            </thead>
            <tbody>
            @foreach (Sleep sleepItem in Model.SleepList)
            {
                <tr>
                    <td style="min-width: 100px;">
                        @sleepItem.SleepStart.ToString("dd-MMM-yyyy")<br /> <strong>@sleepItem.SleepStart.ToString("HH:mm")</strong>
                    </td>
                    <td style="min-width: 100px;">
                        @sleepItem.SleepEnd.ToString("dd-MMM-yyyy")<br /> <strong>@sleepItem.SleepEnd.ToString("HH:mm")</strong>
                    </td>
                    <td>@sleepItem.SleepDuration</td>
                    <td>@sleepItem.SleepRating</td>
                    <td>@sleepItem.SleepNotes</td>
                    @if (Model.IsAdmin)
                    {
                        <td style="min-width: 120px;">
                            <div>
                                <a asp-controller="AddItem" asp-action="EditSleep" asp-route-itemId="@sleepItem.SleepId" class="btn btn-info btn-round btn-sm leavePage leavePage">
                                    <i class="fas fa-pencil-alt"></i>
                                </a>
                                <a asp-controller="AddItem" asp-action="DeleteSleep" asp-route-itemId="@sleepItem.SleepId" class="btn btn-danger btn-round btn-sm leavePage">
                                    <i class="fas fa-trash-alt"></i>
                                </a>
                            </div>
                        </td>
                    }
                </tr>
            }
            </tbody>
        </table>
    </div>
    <br/>
    <div class="container">
        @await LocaleManager.GetTranslation("Total sleep recorded:", PageNames.Sleep, Model.LanguageId) @Model.SleepTotal = @Model.SleepTotal.TotalHours Hours<br />
        @await LocaleManager.GetTranslation("Average sleep per day:", PageNames.Sleep, Model.LanguageId) @Model.TotalAverage<br/><br/>
        @await LocaleManager.GetTranslation("Sleep recorded in the last year:", PageNames.Sleep, Model.LanguageId) @Model.SleepLastYear = @Model.SleepLastYear.TotalHours Hours<br />
        @await LocaleManager.GetTranslation("Average sleep per day in the last year:", PageNames.Sleep, Model.LanguageId) @Model.LastYearAverage<br/><br />
        @await LocaleManager.GetTranslation("Sleep recorded in the last 30 days:", PageNames.Sleep, Model.LanguageId) @Model.SleepLastMonth = @Model.SleepLastMonth.TotalHours Hours<br/>
        @await LocaleManager.GetTranslation("Average sleep per day in the last 30 days:", PageNames.Sleep, Model.LanguageId) @Model.LastMonthAverage<br/><br />
    </div>
    <br />
    <div id="chartDiv">
        <canvas id="chartContainer" style="clear: both; height: 380px;"></canvas>
    </div>
    <br />
    <div class="col-12">
        <div class="row">
            <div class="col-6">
                <div id="sliderStartVal" class="float-right" style="margin-right: 25px;"></div>
            </div>
            <div class="col-6">
                <div id="sliderEndVal" class="float-left" style="margin-left: 25px;"></div>
            </div>
        </div>
    </div>
    <div style="margin-left: 25px; margin-right: 25px;">
        <div id="sliderSleep" class="slider slider-info" style="width: 90%; margin-left: auto; margin-right: auto;"></div>
    </div>
    <br />
    <div class="row">
        <br />
        <div class="container">
            <div class="col-6" style="margin-right: auto; margin-left: auto; margin-top: 30px;">@await LocaleManager.GetTranslation("Drag the circles above to change the chart's start and end dates.", PageNames.Sleep, Model.LanguageId)</div>
        </div>
    </div>
    <br />
    <script src="~/lib/chart.js/dist/Chart.js"></script>
    <script type="text/javascript">
        $(document).ready(function () {
            $.fn.dataTable.moment('DD-MMM-YYYY HH:mm');
            $("#sleepList").DataTable({ "scrollX": false, "order": [[0, "desc"]] });
        })
    </script>

    <script type="text/javascript">
        $(document).ready(function() {
            const ctx = document.getElementById("chartContainer");
            const myChart = new Chart(ctx,
                {
                    type: 'bar',
                    data: {
                        datasets: [
                            {
                                label: '@sleepString',
                                data: [@foreach (Sleep sleepItem in Model.ChartList)
                                {
                                    if (sleepItem.SleepDuration.TotalMinutes > 0.0)
                                    {
                                        string chartYear = sleepItem.SleepStart.Year.ToString();
                                        string chartMonth = (sleepItem.SleepStart.Month - 1).ToString();
                                        string chartDay = sleepItem.SleepStart.Day.ToString();
                                        @Html.Raw("{ t: new Date(" + chartYear + ", " + chartMonth + ", " + chartDay + "), y: " + sleepItem.SleepDuration.TotalMinutes / 60.0 + "},")
                                    }
                                }],
                                borderColor: 'rgb(75, 192, 192)',
                                borderWidth: 1
                            }
                        ]
                    },
                    options: {
                        scales: {
                            xAxes: [
                                {
                                    type: 'time',
                                    time: {
                                        tooltipFormat: 'dd DD MMM YYYY',
                                        displayFormats: {
                                            quarter: 'MMM YYYY'
                                        }
                                    }
                                }
                            ],
                            yAxes: [
                                {
                                    scaleLabel: {
                                        display: true,
                                        labelString: '@durationInHoursString, PageNames.Sleep, Model.LanguageId)'
                                    },
                                    ticks: {
                                        beginAtZero: true
                                    }
                                }
                            ]
                        }
                    }
                });

            myChart.update();
            const slpSlider = document.getElementById('sliderSleep');
            slpSlider.noUiSlider.on('update',
                function() {
                    const pos = $(document).scrollTop();
                    $('#sliderStartVal')
                        .text("Start: " + moment(slider.noUiSlider.get()[0], "x").format("dddd, DD-MMM-YYYY"));
                    $('#sliderEndVal')
                        .text("End: " + moment(slider.noUiSlider.get()[1], "x").format("dddd, DD-MMM-YYYY"));
                    document.getElementById("chartDiv").innerHTML = '&nbsp;';
                    document.getElementById("chartDiv").innerHTML = '<canvas id="chartContainer"></canvas>';
                    const slpChart = document.getElementById("chartContainer").getContext("2d");
                    const cfg = {
                        type: 'bar',
                        data: {
                            datasets: [
                                {
                                    label: '@sleepString',
                                    data: [@foreach (Sleep sleepItem in Model.ChartList)
                                        {
                                            if (sleepItem.SleepDuration.TotalMinutes > 0.0)
                                            {
                                                string chartYear = sleepItem.SleepStart.Year.ToString();
                                                string chartMonth = (sleepItem.SleepStart.Month - 1).ToString();
                                                string chartDay = sleepItem.SleepStart.Day.ToString();
                                                @Html.Raw("{ t: new Date(" + chartYear + ", " + chartMonth + ", " + chartDay + "), y: " + sleepItem.SleepDuration.TotalMinutes / 60.0 + "},")
                                            }
                                        }],
                                    borderColor: 'rgb(75, 192, 192)',
                                    borderWidth: 1
                                }
                            ]
                        },
                        options: {
                            scales: {
                                xAxes: [
                                    {
                                        type: 'time',
                                        time: {
                                            min: moment(slider.noUiSlider.get()[0], "x").toString(),
                                            max: moment(slider.noUiSlider.get()[1], "x").toString(),
                                            tooltipFormat: 'dd DD MMM YYYY',
                                            displayFormats: {
                                                quarter: 'MMM YYYY'
                                            }
                                        }
                                    }
                                ],
                                yAxes: [
                                    {
                                        scaleLabel: {
                                            display: true,
                                            labelString: '@durationInHoursString'
                                        },
                                        ticks: {
                                            beginAtZero: true
                                        }
                                    }
                                ]
                            }
                        }
                    };
                    const newChart = new Chart(slpChart, cfg);
                    newChart.update();
                    $(document).scrollTop(pos);
                });
            }
        );
        function timestamp(str) {
            return new Date(str).getTime();
        }

        let slider = document.getElementById('sliderSleep');

        noUiSlider.create(slider,
            {
                connect: true,
                range: {
                    min: timestamp('@Model.ChartList.First().SleepStart.ToString("yyyy-MM-dd")'),
                    max: timestamp('@Model.ChartList.Last().SleepStart.ToString("yyyy-MM-dd")')
                },
                step: 1000 * 60 * 60 * 24,
                start: [
                    timestamp('@Model.ChartList.First().SleepStart.ToString("yyyy-MM-dd")'),
                    timestamp('@Model.ChartList.Last().SleepStart.ToString("yyyy-MM-dd")')
                ]
            });
    </script>
}