@using System.Globalization
@using KinaUna.Data
@using KinaUna.Data.Extensions
@using KinaUnaWeb.Services
@model KinaUnaWeb.Models.ItemViewModels.PictureItemViewModel
@inject ILocaleManager LocaleManager
@{
    ViewData["Title"] = Model.CurrentProgeny.NickName + " - " + await LocaleManager.GetTranslation("Photo", PageNames.Pictures, Model.LanguageId);
    string photoString = await LocaleManager.GetTranslation("photo", PageNames.Pictures, Model.LanguageId);
    string wasString = await LocaleManager.GetTranslation("was", PageNames.Pictures, Model.LanguageId);
    string daysOldString = await LocaleManager.GetTranslation("days old.", PageNames.Pictures, Model.LanguageId);
    string olderString = await LocaleManager.GetTranslation("Older", PageNames.Pictures, Model.LanguageId);
    string newerString = await LocaleManager.GetTranslation("Newer", PageNames.Pictures, Model.LanguageId);
    string viewPrevText = @olderString;
    string viewNextText = @newerString;
    if (Model.SortBy == 1)
    {
        viewPrevText = @newerString;
        viewNextText = @olderString;
    }
    bool allowHereMaps = Context.Request.HereMapsCookieSet();
    string timeSeparator = CultureInfo.CurrentUICulture.DateTimeFormat.TimeSeparator;
    string longDateTimeFormat = "dd-MMMM-yyyy HH" + timeSeparator + "mm";
    string zebraDateTimeFormat = "d-F-Y H" + timeSeparator + "i";
}
@section Scripts{
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/zebra_datepicker/dist/css/bootstrap/zebra_datepicker.min.css">
    <link href="/css/amsify.suggestags.css" rel="stylesheet" asp-append-version="true"/>
    <script src="/lib/jquery.amsify.suggestags.js" asp-append-version="true"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/locale/da.min.js" integrity="sha512-rybyYvSnwg3zAZ/vjTTMoh8tOK0Z6tC2XCzr9e27M0xr8WU40IGo6SOP7FXXCyWgMyd3wZ8ln2nY4ce1ysYUfw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/locale/de.min.js" integrity="sha512-c0OHGm6x2JXZyrb7Kb+Jcoy7eQ4F+AqzYLeciicpzuvgyeTWRQEZ6QthFYRUBOR0rShmm54O/7pHZJ/nqhbrkw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/locale/de-at.min.js" integrity="sha512-2zI8NFjVrQ4nMIS3HCBVOgiUb6qRiKKa/U4K/DL5aT/sz9dSuHFMZdZIPRjGBQoKZbpyP3NI8diNGK+RlUTTsg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/locale/de-ch.min.js" integrity="sha512-7VvKBnFgucrOLF0GLzWUuhtDcRKYUuOy9O5AqiqvccZFp4zAqAzkMqIlNVCDR3DJ6OZ6dsdn+MLiJ8vZx84WhQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="/lib/material-kit/plugins/jasny-bootstrap.min.js" asp-append-version="true"></script>
    <script src="https://cdn.jsdelivr.net/npm/zebra_datepicker/dist/zebra_datepicker.min.js"></script>
    @if (allowHereMaps)
    {
        <script src="https://js.api.here.com/v3/3.1/mapsjs-core.js" type="text/javascript" charset="utf-8"></script>
        <script src="https://js.api.here.com/v3/3.1/mapsjs-service.js" type="text/javascript" charset="utf-8"></script>
        <script src="https://js.api.here.com/v3/3.1/mapsjs-mapevents.js" type="text/javascript" charset="utf-8"></script>
        <script src="https://js.api.here.com/v3/3.1/mapsjs-ui.js" type="text/javascript" charset="utf-8"></script>
        <link rel="stylesheet" type="text/css" href="https://js.api.here.com/v3/3.1/mapsjs-ui.css"/>
    }
}

<div id="currentMomentLocaleDiv" class="d-none" data-current-locale="@Model.LanguageIdString"></div>
<div id="languageIdDiv" class="d-none" data-current-locale="@Model.LanguageId"></div>
<div id="zebraDateTimeFormatDiv" class="d-none" data-zebra-date-time-format="@zebraDateTimeFormat"></div>
<div id="progenyIdDiv" class="d-none" data-progeny-id="@Model.CurrentProgenyId"></div>
<div class="ml-xl-auto mr-xl-auto col-xxl-11 col-xxxl-10">
<div class="col-12 col-xl-11 col-xxl-10 col-w1900-9 col-w2500-8">
<h2>@ViewData["Title"] - @Model.PictureNumber @await LocaleManager.GetTranslation("of", PageNames.Pictures, Model.LanguageId) @Model.PictureCount</h2>
<div id="photoDiv">
    @if (!string.IsNullOrEmpty(Model.TagFilter))
    {
        <div>@await LocaleManager.GetTranslation("Tag filter:", PageNames.Pictures, Model.LanguageId) @Model.TagFilter</div>
    }
    <div style="max-width: 100%; padding-top: 10px; padding-bottom: 20px;">
        <div style="float: left">
            <a id="previousPhotoLink" class="leavePage" asp-controller="Pictures" asp-action="Picture" asp-route-id="@Model.PrevPicture" asp-route-childId="@Model.CurrentProgeny.Id"
               asp-route-sortBy="@Model.SortBy" asp-route-tagFilter="@Model.TagFilter"><i class="fa fa-arrow-left" aria-hidden="true"></i> @viewPrevText @photoString</a>
        </div>
        <div style="float: right">
            <a id="nextPhotoLink" class="leavePage" asp-controller="Pictures" asp-action="Picture" asp-route-id="@Model.NextPicture" asp-route-childId="@Model.CurrentProgeny.Id"
               asp-route-sortBy="@Model.SortBy" asp-route-tagFilter="@Model.TagFilter">@viewNextText @photoString <i class="fa fa-arrow-right" aria-hidden="true"></i></a>
        </div>
    </div>
    <div class="space-20"></div>
    <div align="center" style="max-width: 100%">
        <img src="@Model.Picture.PictureLink" style="max-height: 90vh; max-width: 100%;" />
    </div>
    <div>
        @{
            if (!string.IsNullOrEmpty(Model.Tags))
            {
                List<string> tagsList = Model.Tags.Split(',').ToList();
                foreach (string tagString in tagsList)
                {
                    <a asp-action="Index" asp-route-id="1" asp-route-childId="@Model.CurrentProgeny.Id" asp-route-sortBy="@Model.SortBy" asp-route-tagFilter="@tagString" class="btn tag-item leavePage">@tagString</a>
                }
            }
        }
    </div>
    <div class="space-20"></div>
    @if (Model.PicTimeValid)
    {
        <div style="font-size: 16px; line-height: 90%;">
            <p>Photo taken: @Model.PicTime</p>
            <p>@Model.CurrentProgeny.NickName @wasString @Model.PicYears @await LocaleManager.GetTranslation("years old.", PageNames.Pictures, Model.LanguageId)</p>
            <p>@Model.CurrentProgeny.NickName @wasString @Model.PicMonths @await LocaleManager.GetTranslation("months old.", PageNames.Pictures, Model.LanguageId)</p>
            <p>@Model.CurrentProgeny.NickName @wasString @Model.PicWeeks[0] @await LocaleManager.GetTranslation("weeks and", PageNames.Pictures, Model.LanguageId) @Model.PicWeeks[1] @daysOldString</p>
            <p>@Model.CurrentProgeny.NickName @wasString @Model.PicDays @daysOldString</p>
            <p>@Model.CurrentProgeny.NickName @wasString @Model.PicHours @await LocaleManager.GetTranslation("hours old.", PageNames.Pictures, Model.LanguageId)</p>
            <p>@Model.CurrentProgeny.NickName @wasString @Model.PicMinutes @await LocaleManager.GetTranslation("minutes old.", PageNames.Pictures, Model.LanguageId)</p>
        </div>
        <div class="space-20"></div>
    }
</div>
@if (User.Identity != null && User.Identity.IsAuthenticated && !string.IsNullOrEmpty(Model.Picture.Longtitude))
{
    <div style="font-size: 16px;">
        <div>@await LocaleManager.GetTranslation("Location:", PageNames.Pictures, Model.LanguageId) @Model.Picture.Location</div>

        @if (!string.IsNullOrEmpty(Model.Picture.Latitude))
        {
            <div>@await LocaleManager.GetTranslation("Latitude:", PageNames.Pictures, Model.LanguageId) @Model.Picture.Latitude @await LocaleManager.GetTranslation("Longitude:", PageNames.Pictures, Model.LanguageId) @Model.Picture.Longtitude @await LocaleManager.GetTranslation("Altitude:", PageNames.Pictures, Model.LanguageId) @Model.Picture.Altitude</div>
            @if (allowHereMaps)
            {
                <div style="width: 100%; height: 300px" id="mapContainer"></div>
                <script>
                    let pixelRatio = window.devicePixelRatio || 1;
                    let defaultIcon = new H.map.Icon("/images/purplemarker.svg", { size: { w: 36, h: 36 } });
                    let platform = new H.service.Platform({
                        'apikey': '@Model.HereMapsApiKey',
                        'useHTTPS': true
                    });

                    let maptypes = platform.createDefaultLayers({
                        tileSize: pixelRatio === 1 ? 256 : 512,
                        ppi: pixelRatio === 1 ? undefined : 320
                    });

                    let map = new H.Map(document.getElementById('mapContainer'),
                        maptypes.vector.normal.map,
                        {
                            zoom: 14,
                            center: { lng: @Model.Picture.Longtitude, lat: @Model.Picture.Latitude },
                            pixelRatio: pixelRatio
                        });

                    let ui = H.ui.UI.createDefault(map, maptypes);
                    let behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));


                    let marker = new H.map.Marker({ lat: @Model.Picture.Latitude.ToString(new CultureInfo("en-US")).Replace(',', '.'), lng: @Model.Picture.Longtitude.ToString(new CultureInfo("en-US")).Replace(',', '.')}, { icon: defaultIcon });
                    map.addObject(marker);

                    let reverseGeocodingParameters = {
                        prox: '@Model.Picture.Latitude,  @Model.Picture.Longtitude, 32',
                        mode: 'retrieveAddresses',
                        maxresults: 1
                    };

                    function onGeoSuccess(result) {
                        let location = result.Response.View[0].Result[0];
                        let contextText = "";
                        let streetName = "";
                        let districtName = "";
                        let cityName = "";
                        let countyName = "";
                        let stateName = "";
                        if (location.Location.Address.Street !== undefined) {
                            streetName = location.Location.Address.Street;
                            contextText = contextText + location.Location.Address.Street;
                        }
                        if (location.Location.Address.District !== undefined) {
                            districtName = location.Location.Address.District;
                            if (districtName !== streetName) {
                                contextText = contextText + " " + location.Location.Address.District;
                            }
                        }
                        if (location.Location.Address.City !== undefined) {
                            cityName = location.Location.Address.City;
                            if (cityName !== districtName && districtName.indexOf(cityName) < 0) {
                                contextText = contextText + ", " + location.Location.Address.City;
                            }
                        }
                        if (location.Location.Address.County !== undefined) {
                            countyName = location.Location.Address.County;
                            if (countyName !== cityName && cityName.indexOf(countyName) < 0 && countyName.indexOf(cityName) < 0) {
                                contextText = contextText + ", " + location.Location.Address.County;
                            }
                        }
                        if (location.Location.Address.State !== undefined) {
                            stateName = location.Location.Address.State;
                            if (stateName !== cityName && stateName !== countyName) {
                                contextText = contextText + ", " + location.Location.Address.State;
                            }
                        }
                        if (location.Location.Address.AdditionalData[0].value !== undefined) {
                            contextText = contextText + ", " + location.Location.Address.AdditionalData[0].value;
                        }
                        contextText = contextText.replace(/(^,)|(,$)/g, "").trim();
                        ui.addBubble(new H.ui.InfoBubble({
                            lat: location.Location.DisplayPosition.Latitude,
                            lng: location.Location.DisplayPosition.Longitude
                        }, { content: contextText }));
                    };

                    let geocoder = platform.getGeocodingService();
                    geocoder.reverseGeocode(
                        reverseGeocodingParameters,
                        onGeoSuccess,
                        function (e) { console.log('Error in Reverse Geocode: ' + e); });

                </script>
            }
            else
            {
                <div class="col-12 col-md-10 col-lg-9 col-xl-8 col-xxl-7 col-w1900-6 col-w2500-5">
                    <div class="space-20"></div>
                    <div>@await LocaleManager.GetTranslation("Cookie consent for Here maps has not been granted. To use maps enable cookies for Here Maps.", PageNames.Locations, Model.LanguageId)</div>
                    <div class="space-20"></div>
                    @if (Context.Request.ConsentCookieSet())
                    {
                        @await Html.PartialAsync("_CookieConsentPartial", Model.LanguageId)
                    }
                </div>
            }
        }
    </div>
    <div class="space-20"></div>
}
@if (Model.CommentsList.Count > 0)
{
    <div>
        <div>
            <h5>@await LocaleManager.GetTranslation("Comments", PageNames.Pictures, Model.LanguageId) (@Model.CommentsCount):</h5>
        </div>
        <div class="col-md-10">
            <div class="media-area">
                @foreach (Comment cmnt in Model.CommentsList)
                {
                    <div class="card bg-light text-dark">
                        <div class="card-body">
                            <div class="float-left" style="margin-left: -15px; margin-right: 5px;">
                                <div class="img-circle" style="height: 46px; width: 46px;">
                                    <img height="40" width="40" class="rounded img-fluid" src="@cmnt.AuthorImage" />
                                </div>
                            </div>
                            <h6 class="text-muted" style="margin-top: 0; padding-top: 0;">
                                @cmnt.DisplayName <small> · @cmnt.Created.ToString("dd-MMM-yyyy HH:mm")</small>
                            </h6>
                            <div>
                                @cmnt.CommentText
                            </div>
                            <br />
                            @if (cmnt.Author == Model.CurrentUser.UserId)
                            {
                                <div class="media-footer">
                                    <form class="form-inline float-right" asp-controller="Pictures" asp-action="DeletePictureComment" role="form" method="post">

                                        <div class="form-group">
                                            <div>
                                                <button class="btn btn-danger btn-sm leavePage" type="submit">@await LocaleManager.GetTranslation("Delete comment", PageNames.Pictures, Model.LanguageId)</button>
                                            </div>
                                        </div>
                                        <input Name="CommentThreadNumber" class="form-control" value="@Model.CommentThreadNumber" type="hidden" />
                                        <input Name="CommentId" class="form-control" value="@cmnt.CommentId" type="hidden" />
                                        <input Name="PictureId" class="form-control" value="@Model.Picture.PictureId" type="hidden" />
                                        <input Name="ProgenyId" class="form-control" value="@Model.Picture.ProgenyId" type="hidden" />
                                    </form>
                                </div>
                            }
                        </div>
                    </div>
                }
            </div>
        </div>
    </div>
}
@if (User.Identity != null && User.Identity.IsAuthenticated)
{
    <form asp-controller="Pictures" asp-action="AddPictureComment" role="form" method="post">
        <div class="form-group">
            <label Name="CommentText" class="col-lg-3 col-sm-3 control-label">@await LocaleManager.GetTranslation("New comment:", PageNames.Pictures, Model.LanguageId)</label>
            <div class="col-12 col-lg-9 col-xl-8 col-xxl-7 col-w1900-6 col-w2500-5">
                <textarea Name="CommentText" class="form-control" rows="4"></textarea>
                <button class="btn btn-success float-right leavePage" style="margin-right: 15px;" type="submit">@await LocaleManager.GetTranslation("Add comment", PageNames.Pictures, Model.LanguageId)</button>
            </div>
        </div>
        <input asp-for="CommentThreadNumber" class="form-control" value="@Model.Picture.CommentThreadNumber" type="hidden" />
        <input asp-for="SortBy" class="form-control" value="@Model.SortBy" type="hidden" />
        <input name="ItemId" class="form-control" value="@Model.Picture.PictureId" type="hidden" />
        <input asp-for="CurrentProgenyId" class="form-control" value="@Model.Picture.ProgenyId" type="hidden" />
    </form>
}
<div class="space-20"></div>
@if (Model.IsCurrentUserProgenyAdmin)
{
    <div class="col-sm-3" style="margin-top: 35px;"></div>
    <div class="col-md-8">
        <button id="toggleEditBtn" class="btn btn-info">Edit Photo</button>
    </div>
    <div id="editSection" style="display: none; padding: 15px;">
        <div>@await LocaleManager.GetTranslation("Edit user access, location, or date and time for this photo", PageNames.Pictures, Model.LanguageId)</div><br />
        <form asp-controller="Pictures" asp-action="EditPicture" role="form">
            <div class="form-group">
                <label class="col-auto control-label">@await LocaleManager.GetTranslation("Tags", PageNames.Pictures, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="tagList" type="text" asp-for="Picture.Tags" value="@Model.Picture.Tags" placeholder="Add tag..." class="form-control" />
                </div>
                <script>
                    $('input[id="tagList"').amsifySuggestags({ suggestions: @Html.Raw(Model.TagsList)});                        
                </script>
            </div>
            <div class="form-group">
                <label asp-for="Picture.AccessLevel" class="col-auto control-label">@await LocaleManager.GetTranslation("Access level", PageNames.AccessManagement, Model.LanguageId)</label>
                <div class="col-auto">
                    <select class="selectpicker form-control-noline" data-style="btn-kinaunaselect" data-size="@Model.AccessLevelListEn.Count" asp-for="Picture.AccessLevel" asp-items="@Model.AccessLevelListEn"></select>
                </div>
            </div>
            <div class="form-group">
                <label asp-for="Picture.PictureTime" class="col-auto control-label">@await LocaleManager.GetTranslation("Photo date and time", PageNames.Pictures, Model.LanguageId)</label>
                <div class="col-12">
                    <input id="datetimepicker1" type="text" class="form-control-noline pl-3" asp-for="Picture.PictureTime"
                           value="@Model.Picture.PictureTime?.ToString(longDateTimeFormat)"/>
                </div>
            </div>
            <div class="form-group">
                <label class="col-auto control-label">@await LocaleManager.GetTranslation("Location", PageNames.Pictures, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="locationInput" type="text" asp-for="Picture.Location" value="@Model.Picture.Location" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label class="col-auto control-label">@await LocaleManager.GetTranslation("Latitude", PageNames.Pictures, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="latitude" type="text" asp-for="Picture.Latitude" value="@Model.Picture.Latitude" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label class="col-auto control-label">@await LocaleManager.GetTranslation("Longitude", PageNames.Pictures, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="longitude" type="text" asp-for="Picture.Longtitude" value="@Model.Picture.Longtitude" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label class="col-auto control-label">@await LocaleManager.GetTranslation("Altitude", PageNames.Pictures, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="altitude" type="text" asp-for="Picture.Altitude" value="@Model.Picture.Altitude" class="form-control" />
                </div>
            </div>
            @if (Model.LocationsList.Any())
            {
                <div class="form-group">
                    <label class="col-auto control-label">@await LocaleManager.GetTranslation("Copy location latitude and longitude from existing location", PageNames.Pictures, Model.LanguageId)</label>
                    <div class="col-auto">
                        <div class="row row-cols-auto ml-0 mr-0">
                            <select id="copyLocation" class="selectpicker form-control-noline col pl-0" data-style="btn-kinaunaselect" asp-items="@Model.LocationsList"></select>
                            <button id="copyLocationButton" type="button" class="btn btn-primary col-auto mt-0 mb-0 ml-2">@await LocaleManager.GetTranslation("Copy", PageNames.Pictures, Model.LanguageId)</button>
                        </div>
                    </div>
                </div>
            }
            <br />
            <input asp-for="Picture.PictureId" class="form-control" value="@Model.Picture.PictureId" type="hidden" />
            <input asp-for="Picture.ProgenyId" class="form-control" value="@Model.Picture.ProgenyId" type="hidden" />
            <input asp-for="TagFilter" class="form-control" value="@Model.TagFilter" type="hidden" />
            <input asp-for="Picture.Author" class="form-control" value="@Model.Picture.Author" type="hidden" />
            <div>
                <div class="form-group">
                    <div class="col-auto control-label"></div>
                    <div class="col-auto">
                        <button class="btn btn-success leavePage" type="submit">@await LocaleManager.GetTranslation("Save", PageNames.AddItem, Model.LanguageId)</button>
                        <a class="btn btn-danger leavePage" asp-controller="@ViewContext.RouteData.Values["controller"]" asp-action="@ViewContext.RouteData.Values["action"]" asp-route-id="@ViewContext.RouteData.Values["id"]" asp-route-childId="@Model.Picture.ProgenyId">@await LocaleManager.GetTranslation("Cancel", PageNames.AddItem, Model.LanguageId)</a>
                    </div>
                </div>
            </div>
        </form>
        <form asp-controller="Pictures" asp-action="DeletePicture" role="form" method="get">
            <div class="form-group">
                <label class="col-auto control-label">@await LocaleManager.GetTranslation("Remove this picture:", PageNames.Pictures, Model.LanguageId)</label>
                <div class="col-auto">
                    <button class="btn btn-danger leavePage" type="submit">@await LocaleManager.GetTranslation("Delete picture", PageNames.Pictures, Model.LanguageId)</button>
                </div>
            </div>
            <input name="pictureId" class="form-control" value="@Model.Picture.PictureId" type="hidden" />
        </form>
    </div>
    <script type="text/javascript">
        var copyLocationList = [];
        @{
            string myLoc = "";
            string addLoc = "";
            foreach (Location loc in Model.ProgenyLocations)
            {
                myLoc = myLoc + "let loc" + loc.LocationId + " = {id: " + loc.LocationId + ", name: \'" + loc.Name + "\', lat: " + loc.Latitude.ToString(new CultureInfo("en-US")).Replace(',', '.') + ", lng: " + loc.Longitude.ToString(new CultureInfo("en-US")).Replace(',', '.') + "};";
                addLoc = addLoc + "copyLocationList.push(loc" + loc.LocationId + ");";
            }
        }        
        @Html.Raw(myLoc)
        @Html.Raw(addLoc)    
    </script>
    <script src="/js/pictures/add-edit-picture.js" type="module" asp-append-version="true"></script>
}
<br />
<div style="max-width: 100%; padding-top: 10px; padding-bottom: 20px;">
    <div style="float: left">
        <a class="leavePage" asp-controller="Pictures" asp-action="Picture" asp-route-id="@Model.PrevPicture" asp-route-childId="@Model.CurrentProgeny.Id" asp-route-sortBy="@Model.SortBy" asp-route-tagFilter="@Model.TagFilter"><i class="fa fa-arrow-left" aria-hidden="true"></i> @viewPrevText @photoString</a>
    </div>
    <div style="float: right">
        <a class="leavePage" asp-controller="Pictures" asp-action="Picture" asp-route-id="@Model.NextPicture" asp-route-childId="@Model.CurrentProgeny.Id" asp-route-sortBy="@Model.SortBy" asp-route-tagFilter="@Model.TagFilter">@viewNextText @photoString <i class="fa fa-arrow-right" aria-hidden="true"></i></a>
    </div>
</div>
</div>
</div>