@using System.Globalization
@using KinaUna.Data
@model KinaUnaWeb.Models.ItemViewModels.LocationViewModel
@section Scripts{
    <script src="https://js.api.here.com/v3/3.0/mapsjs-core.js" type="text/javascript" charset="utf-8"></script>
    <script src="https://js.api.here.com/v3/3.0/mapsjs-service.js" type="text/javascript" charset="utf-8"></script>
    <script src="https://js.api.here.com/v3/3.0/mapsjs-ui.js" type="text/javascript" charset="utf-8"></script>
    <script type="text/javascript" src="https://js.api.here.com/v3/3.0/mapsjs-mapevents.js"></script>
    <link rel="stylesheet" type="text/css" href="https://js.api.here.com/v3/3.0/mapsjs-ui.css" />
}
@{
    ViewData["Title"] = Model.Progeny.NickName + "'s Foto steder";
}

@if (!String.IsNullOrEmpty(Model.TagFilter))
{
    <br />
    <div style="float: right;">Tag filter: <span class="badge badge-pill badge-rose">@Model.TagFilter</span> <a class="btn btn-info btn-sm leavePage" asp-action="Index" asp-route-childId="@Model.Progeny.Id" asp-route-sortBy="@Model.SortBy"><i class="fas fa-minus-circle"></i> Nulstil filter</a></div>
}
@if (Model.IsAdmin)
{
    <div class="btn-group" style="float: right;">
        <a asp-controller="AddItem" asp-action="AddLocation" class="btn btn-success btn-round leavePage">
            <i class="fas fa-plus"></i> Tilføj sted
        </a>
    </div>
}
@if (Model.LocationsList == null)
{
    <h3 class="title">@ViewData["Title"]</h3>
    <div>Ingen data.</div>
}
else
{
    <div class="btn-group" style="float: right;">
        <a asp-controller="Locations" asp-action="Index" class="btn btn-info leavePage">
            <i class="fas fa-map-marked-alt"></i> Gå til steder
        </a>
    </div>
    <h3 class="title">@ViewData["Title"]</h3>
    <div class="row" style="clear: both; margin-top: 25px;">
        <div style="width: 100%; height: 560px; max-height: 60vh; margin-left: 20px; margin-right: 20px;" id="mapContainer"></div>
        <script>
            let pixelRatio = window.devicePixelRatio || 1;
            let iconWidth = Math.floor(36 * pixelRatio + (pixelRatio -1) * 8);
            let iconHeight = Math.floor(36 * pixelRatio + (pixelRatio - 1) * 8);
            let defaultIcon = new H.map.Icon("@Constants.WebAppUrl/images/purplemarker.svg", { size: { w: iconWidth, h: iconHeight } });
            let prevSelectedMarker;
            let nearbyList = [];
            let lastNearby = 0;
            function getNearbyPicture(marker) {
                nearbyList.push(marker);
                if (lastNearby < 5) {
                    var tData = { typeId: 1, itemId: marker.getData() };
                    $.ajax({
                        type: "GET",
                        url: "/TimeLine/GetTimeLineItem",
                        data: tData,
                        datatype: "html",
                        async: true,
                        success: function (data) {
                            $('#innerNearbyDiv').append('<div class="addedDiv" style="display:none;">' + data + '</div>');
                            $('div.addedDiv').slideDown("slow");
                        },
                        error: function (jqXhr, textStatus, errorThrown) {
                            console.log(textStatus, errorThrown);
                        }
                    });
                    lastNearby++;
                }
                $('#nearbyDiv').html('<div id="innerNearbyDiv" class><br/>' + nearbyList.length + ' flere foto indenfor 50 meters afstand:<br/></div>');
                if (lastNearby < nearbyList.length) {
                    $('#morePicturesButton').show();

                    if (lastNearby < nearbyList.length - 5) {
                        let numItems = nearbyList.length - lastNearby;
                        $('#moreButton').prop('value', 'Vis de næste ' + numItems + ' foto i nærheden');
                    }
                }
                else {
                    $('#morePicturesButton').hide();
                }
            }
            function getMoreNearbyPictures() {
                for (let i = 0; i < 5; i++) {
                    lastNearby++;
                    if (lastNearby < nearbyList.length) {
                        var tData = { typeId: 1, itemId: nearbyList[lastNearby].getData() };
                        $.ajax({
                            type: "GET",
                            url: "/TimeLine/GetTimeLineItem",
                            data: tData,
                            datatype: "html",
                            async: true,
                            success: function (data) {
                                $('#innerNearbyDiv').append('<div class="addedDiv" style="display:none;">' + data + '</div>');
                                $('div.addedDiv').slideDown("slow");
                            },
                            error: function (jqXhr, textStatus, errorThrown) {
                                console.log(textStatus, errorThrown);
                            }
                        });
                    }
                }
                if (lastNearby === nearbyList.length) {
                    $('#morePicturesButton').hide();
                }
            }
            function setUpClickListener(map) {
                map.addEventListener('tap',
                    function (evt) {
                        var coord = map.screenToGeo(evt.currentPointer.viewportX, evt.currentPointer.viewportY);
                        map.setCenter(coord, true);
                        let target = evt.target;
                        if (target instanceof mapsjs.map.Marker) {
                            let markerPos;
                            let tData = { typeId: 1, itemId: target.getData() };
                            $.ajax({
                                type: "GET",
                                url: "/TimeLine/GetTimeLineItem",
                                data: tData,
                                datatype: "html",
                                async: true,
                                success: function (data) {
                                    if (prevSelectedMarker instanceof mapsjs.map.Marker) {
                                        prevSelectedMarker.setIcon(defaultIcon);
                                    }
                                    let selectedIcon = new H.map.Icon("@Constants.WebAppUrl/images/redmarker.svg", { size: { w: iconWidth, h: iconHeight } });
                                    target.setIcon(selectedIcon);
                                    prevSelectedMarker = target;
                                    markerPos = target.getPosition();
                                    map.setCenter(markerPos);
                                    $('#nearbyDiv').html('<div id="innerNearbyDiv"></div>');
                                    $('#morePicturesButton').hide();
                                    $('#pictureDiv').html(data);
                                    $('html, body').animate({
                                        'scrollTop': $('#pictureDiv').offset().top - 110
                                    }, 500);
                                    lastNearby = 0;
                                    nearbyList = [];
                                    let mapObjects = map.getObjects();
                                    let objectsLen = mapObjects.length;
                                    for (let i = 0; i < objectsLen; i++) {
                                        if (mapObjects[i] instanceof mapsjs.map.Marker) {
                                            if (mapObjects[i].getData() !== target.getData()) {
                                                //console.log('Marker(' + i + '): ' + mapObjects[i].getData())
                                                //console.log('Coords: ' + mapObjects[i].getPosition());
                                                markerDist = mapObjects[i].getPosition().distance(markerPos);
                                                if (markerDist < 50) {
                                                    getNearbyPicture(mapObjects[i]);
                                                }
                                            }

                                        }
                                    }
                                },
                                error: function (jqXhr, textStatus, errorThrown) {
                                    console.log(textStatus, errorThrown);
                                }
                            });
                        }
                    });
            }
            let platform = new H.service.Platform({
                'app_id': '@Constants.HereMapsId',
                'app_code': '@Constants.HereMapsCode',
                'useHTTPS': true
            });
            let maptypes = platform.createDefaultLayers({
                tileSize: pixelRatio === 1 ? 256 : 512,
                ppi: pixelRatio === 1 ? undefined : 320
            });
            let map = new H.Map(document.getElementById('mapContainer'),
                maptypes.normal.map,
                {
                    zoom: 3,
                    center: { lng: @Model.Longitude.ToString(new CultureInfo("en-US")).Replace(',', '.'), lat: @Model.Latitude.ToString(new CultureInfo("en-US")).Replace(',', '.')},
                    pixelRatio: pixelRatio
                });
            let behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));
            setUpClickListener(map);
            let ui = H.ui.UI.createDefault(map, maptypes);
            let group = new H.map.Group();
            @{
                string locGroup = "[";
                string polyCode = "";
                string markerCode = "";
                string setData = "";
            }
            @foreach (Location lineLoc in Model.LocationsList)
                {
                    string pPoint = "lineString.pushPoint({lat:" + lineLoc.Latitude.ToString(new CultureInfo("en-US")).Replace(',', '.') + ", lng:" + lineLoc.Longitude.ToString(new CultureInfo("en-US")).Replace(',', '.') + "});";
                    string pMarker = "let marker" + lineLoc.LocationId + " = new H.map.Marker({lat:" + lineLoc.Latitude.ToString(new CultureInfo("en-US")).Replace(',', '.') + ", lng:" + lineLoc.Longitude.ToString(new CultureInfo("en-US")).Replace(',', '.') + "}, {icon: defaultIcon});";
                    locGroup = locGroup + "marker" + lineLoc.LocationId + ", ";
                    string sMarker = "marker" + lineLoc.LocationId + ".setData(" + lineLoc.LocationId + ");";
                    polyCode = polyCode + pPoint;
                    markerCode = markerCode + pMarker;
                    setData = setData + sMarker;

                }
            @{ locGroup = locGroup.Trim().TrimEnd(',') + "]";}
            @Html.Raw(markerCode)
            @Html.Raw(setData);
            group.addObjects(@locGroup);
            map.addObject(group);
            function addPolylineToMap(map) {
                let lineString = new H.geo.LineString();
                @Html.Raw(polyCode)
                map.addObject(new H.map.Polyline(
                    lineString, { style: { lineWidth: 4 }}
                ));
            }
            addPolylineToMap(map);
            map.setViewBounds(group.getBounds());
        </script>
        <br />
        <div id="pictureDiv" style="width:100%; min-height: 375px; margin-left: 20px; margin-right: 20px;">
            <div class="card bg-primary" style="margin-top: 0; margin-bottom: 10px;">
                <div class="card-body" style="background: #326ebe; background: rgba(50, 110, 190, 0.8)">
                    <div class="info-title"><span style="font-size: 24px; color: white; margin-right: 15px;" class="far fa-images"></span><strong class="text-warning"> Klik en markør på kortet</strong></div>
                    <div align="center" class="img-rounded" style="overflow: hidden; max-width: 60vw; margin: 2px; margin-left: 46px; padding: 1px; width: 270px; height: 270px; background-color: #000000; text-align: center; line-height: 271px; display: inline-block; position: relative;">
                        <img src="@Constants.WebAppUrl/images/kinaunalogo192x192.png" style="max-height: 260px; max-width: 260px;">
                    </div>
                </div>
            </div>
        </div>
        <div id="nearbyDiv" style="width:100%; margin-left: 20px; margin-right: 20px;">
            <div id="innerNearbyDiv"></div>
        </div>
        <div id="morePicturesButton" style="display: none; width:100%; margin-left: 20px; margin-right: 20px;"><button id="moreButton" type="button" class="btn btn-default" onclick="getMoreNearbyPictures()">Vis de 5 næste billeder i nærheden</button></div>
        <div style="margin-left: 20px; margin-right: 20px;">
            @{
                if (!string.IsNullOrEmpty(Model.Tags))
                {
                    string[] tagsList = Model.Tags.Split(',');
                    foreach (string tagString in tagsList)
                    {
                        <a asp-action="PhotoLocations" asp-route-childId="@Model.Progeny.Id" asp-route-sortBy="@Model.SortBy" asp-route-tagFilter="@tagString" class="badge badge-pill badge-rose leavePage">@tagString</a>
                    }
                }
            }
        </div>
    </div>
}