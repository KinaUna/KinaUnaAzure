@using KinaUnaWeb.Services
@using Microsoft.AspNetCore.Mvc.TagHelpers
@using KinaUna.Data
@using System.Globalization
@model KinaUnaWeb.Models.ItemViewModels.LocationViewModel
@section Scripts{
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/zebra_datepicker/dist/css/bootstrap/zebra_datepicker.min.css">
    <link href="/css/amsify.suggestags.css" rel="stylesheet" />
    <script src="/lib/jquery.amsify.suggestags.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/moment.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/locale/da.min.js" integrity="sha512-rybyYvSnwg3zAZ/vjTTMoh8tOK0Z6tC2XCzr9e27M0xr8WU40IGo6SOP7FXXCyWgMyd3wZ8ln2nY4ce1ysYUfw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/locale/de.min.js" integrity="sha512-c0OHGm6x2JXZyrb7Kb+Jcoy7eQ4F+AqzYLeciicpzuvgyeTWRQEZ6QthFYRUBOR0rShmm54O/7pHZJ/nqhbrkw==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/locale/de-at.min.js" integrity="sha512-2zI8NFjVrQ4nMIS3HCBVOgiUb6qRiKKa/U4K/DL5aT/sz9dSuHFMZdZIPRjGBQoKZbpyP3NI8diNGK+RlUTTsg==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/moment.js/2.29.4/locale/de-ch.min.js" integrity="sha512-7VvKBnFgucrOLF0GLzWUuhtDcRKYUuOy9O5AqiqvccZFp4zAqAzkMqIlNVCDR3DJ6OZ6dsdn+MLiJ8vZx84WhQ==" crossorigin="anonymous" referrerpolicy="no-referrer"></script>
    <script src="/lib/material-kit/plugins/jasny-bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/zebra_datepicker/dist/zebra_datepicker.min.js"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-core.js" type="text/javascript" charset="utf-8"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-service.js" type="text/javascript" charset="utf-8"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-mapevents.js" type="text/javascript" charset="utf-8"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-ui.js" type="text/javascript" charset="utf-8"></script>
    <link rel="stylesheet" type="text/css" href="https://js.api.here.com/v3/3.1/mapsjs-ui.css"/>
}
@inject ILocaleManager LocaleManager
@{
    ViewData["Title"] = await LocaleManager.GetTranslation("Add location", PageNames.Locations, Model.LanguageId);
    string addLocationForString = await LocaleManager.GetTranslation("Add location for:", PageNames.Locations, Model.LanguageId);
    string longDateTimeFormat = "dd-MMMM-yyyy";
    string zebraDateTimeFormat = "d-F-Y";
}
<div class="ml-xl-auto mr-xl-auto col-xxl-11 col-xxxl-10">
    <div class="add-item-container">
        <div class="col-12">
            <h2>@ViewData["Title"]</h2>
            <button onclick="geoFindMe()" class="btn btn-info" style="float: right;" id="getLocation">Copy my current location</button>
            <div id="out"></div>
        </div>
        <div class="space-20"></div>
        <form asp-action="AddLocation" role="form" method="post" enctype="multipart/form-data">
            @if (Model.ProgenyList.Count > 1)
            {
                <div class="form-group">
                    <label asp-for="LocationItem.ProgenyId" class="col-auto control-label">@addLocationForString</label>
                    <div class="col-auto">
                        <select class="selectpicker form-control-noline" data-style="btn-kinaunaselect" data-size="@Model.ProgenyList.Count" asp-for="LocationItem.ProgenyId" asp-items="@Model.ProgenyList"></select>
                    </div>
                </div>
            }
            else
            {
                <div class="form-group">
                    <label class="col-auto control-label">@addLocationForString</label>
                    <div class="col-auto">
                        <input type="text" readonly class="form-control" value="@Model.ProgenyList[0].Text" />
                    </div>
                    <input asp-for="LocationItem.ProgenyId" value="@Model.ProgenyList[0].Value" type="hidden" />
                </div>
            }
            <div class="form-group">
                <label asp-for="LocationItem.Name" class="col-auto control-label">@await LocaleManager.GetTranslation("Name or label", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="nameText" asp-for="LocationItem.Name" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.StreetName" class="col-auto control-label">@await LocaleManager.GetTranslation("Street", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="streetText" asp-for="LocationItem.StreetName" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.HouseNumber" class="col-auto control-label">@await LocaleManager.GetTranslation("House number", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="houseNumberText" asp-for="LocationItem.HouseNumber" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.District" class="col-auto control-label">@await LocaleManager.GetTranslation("District", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="disctrictText" asp-for="LocationItem.District" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.City" class="col-auto control-label">@await LocaleManager.GetTranslation("City", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="cityText" asp-for="LocationItem.City" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.PostalCode" class="col-auto control-label">@await LocaleManager.GetTranslation("Postal code", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="postalCodeText" asp-for="LocationItem.PostalCode" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.County" class="col-auto control-label">@await LocaleManager.GetTranslation("County", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="countyText" asp-for="LocationItem.County" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.State" class="col-auto control-label">@await LocaleManager.GetTranslation("State", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="stateText" asp-for="LocationItem.State" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.Country" class="col-auto control-label">@await LocaleManager.GetTranslation("Country", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="countryText" asp-for="LocationItem.Country" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.Latitude" class="col-auto control-label">@await LocaleManager.GetTranslation("Latitude", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="latitudeText" asp-for="LocationItem.Latitude" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.Longitude" class="col-auto control-label">@await LocaleManager.GetTranslation("Longitude", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="longitudeText" asp-for="LocationItem.Longitude" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.Date" class="col-auto control-label">@await LocaleManager.GetTranslation("Date", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <div class="input-group date">
                        <input id="datetimepicker1"  type="text"
                               class="form-control" data-zdp_readonly_element="false" asp-for="LocationItem.Date" value="@Model.LocationItem.Date!.Value.ToString(longDateTimeFormat)" />
                    </div>
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.Notes" class="col-auto control-label">@await LocaleManager.GetTranslation("Notes", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input asp-for="LocationItem.Notes" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label class="col-auto control-label">@await LocaleManager.GetTranslation("Tags", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="tagList" type="text" asp-for="LocationItem.Tags" value="@Model.LocationItem.Tags" placeholder="Add tag..." class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.AccessLevel" class="col-auto control-label">@await LocaleManager.GetTranslation("Access level", PageNames.AccessManagement, Model.LanguageId)</label>
                <div class="col-lg-9">
                    <select class="selectpicker form-control-noline" data-style="btn-kinaunaselect" data-size="@Model.AccessLevelListEn.Count" asp-for="LocationItem.AccessLevel" asp-items="@Model.AccessLevelListEn"></select>
                </div>
            </div>
            <div>
                <div class="form-group">
                    <div class="col-auto control-label"></div>
                    <div class="col-auto">
                        <button class="btn btn-success leavePage" type="submit">@await LocaleManager.GetTranslation("Save", PageNames.AddItem, Model.LanguageId)</button>
                        <a class="btn btn-danger leavePage" asp-controller="Locations" asp-action="Index">@await LocaleManager.GetTranslation("Cancel", PageNames.AddItem, Model.LanguageId)</a>
                    </div>
                </div>
            </div>
        </form>
        <div class="col-auto">
            <div>@await LocaleManager.GetTranslation("Click on the map below to get location information.", PageNames.Locations, Model.LanguageId)</div>
            <div style="width: 100%; height: 480px" id="mapContainer"></div>
        </div>
    </div>
</div>
<script>
    moment.locale('@Model.LanguageIdString');
    const zebraDatePickerDaysArray = [
        '@Html.Raw(await LocaleManager.GetTranslation("Sunday", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("Monday", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("Tuesday", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("Wednesday", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("Thursday", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("Friday", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("Saturday", PageNames.CalendarTools, Model.LanguageId))'
    ];

    const zebraDatePickerMonthsArray = [
        '@Html.Raw(await LocaleManager.GetTranslation("January", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("February", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("March", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("April", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("May", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("June", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("July", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("August", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("September", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("October", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("November", PageNames.CalendarTools, Model.LanguageId))',
        '@Html.Raw(await LocaleManager.GetTranslation("December", PageNames.CalendarTools, Model.LanguageId))'
    ];
    const zebraTodayString = '@Html.Raw(await LocaleManager.GetTranslation("Today", PageNames.CalendarTools, Model.LanguageId))';
    const zebraClearString = '@Html.Raw(await LocaleManager.GetTranslation("Clear", PageNames.CalendarTools, Model.LanguageId))';

    $(function () {
        $('#datetimepicker1').Zebra_DatePicker({
            format: '@zebraDateTimeFormat',
            open_icon_only: true,
            days: zebraDatePickerDaysArray,
            months: zebraDatePickerMonthsArray,
            lang_clear_date: zebraClearString,
            show_select_today: zebraTodayString,
            select_other_months: true
        });
    });

    $('input[id="tagList"').amsifySuggestags({
        suggestions: @Html.Raw(Model.TagsList)
                                            });

    function setUpClickListener(map) {
                map.addEventListener('tap', function (evt) {
            let zoomLevel = map.getZoom() + 1;
            if (zoomLevel > 20) {
                zoomLevel = 20;
            }
            map.setZoom(zoomLevel, true);
            let coord = map.screenToGeo(evt.currentPointer.viewportX,
                evt.currentPointer.viewportY);
            map.setCenter(coord, true);
            
            let geocoder = platform.getGeocodingService();
            let reverseGeocodingParameters = {
                prox: coord.lat +', ' + coord.lng + ', 32',
                mode: 'retrieveAddresses',
                maxresults: 1
            };
            geocoder.reverseGeocode(
                reverseGeocodingParameters,
                onGeoSuccess,
                function (e) { console.log('Error in Reverse Geocode: ' + e); }
            );
            $("#latitudeText").val(coord.lat);
            $("#longitudeText").val(coord.lng);
        });
    }
    
    let platform = new H.service.Platform({
        'apikey': '@Constants.HereMapsApiKey',
        'useHTTPS': true
    });

    let pixelRatio = window.devicePixelRatio || 1;
    let maptypes = platform.createDefaultLayers({
        tileSize: pixelRatio === 1 ? 256 : 512,
        ppi: pixelRatio === 1 ? undefined : 320
    });

    let map = new H.Map(document.getElementById('mapContainer'),
        maptypes.vector.normal.map,
        {
            zoom: 3,
            center: { lng: @Model.LocationItem.Longitude.ToString(new CultureInfo("en-US")).Replace(',', '.'), lat: @Model.LocationItem.Latitude.ToString(new CultureInfo("en-US")).Replace(',', '.') },
            pixelRatio: pixelRatio
        });
    
    let ui = H.ui.UI.createDefault(map, maptypes);
    let behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

    setUpClickListener(map);
        
    function onGeoSuccess(result) {
        let location = result.Response.View[0].Result[0];
        let contextText = "";
        let streetName = "";
        let houseNumber = "";
        let districtName = "";
        let cityName = "";
        let postalCode = "";
        let countyName = "";
        let stateName = "";
        if (location.Location.Address.Street !== undefined) {
            streetName = location.Location.Address.Street;
            contextText = contextText + location.Location.Address.Street;
            $("#streetText").val(streetName);
        }
        if (location.Location.Address.HouseNumber !== undefined) {
            houseNumber = location.Location.Address.HouseNumber;
            contextText = contextText + location.Location.Address.HouseNumber;
            $("#houseNumberText").val(houseNumber);
        }
        if (location.Location.Address.District !== undefined) {
            districtName = location.Location.Address.District;
            if (districtName !== streetName) {
                contextText = contextText + " " + location.Location.Address.District;
            }
            $("#disctrictText").val(districtName);
        }
        if (location.Location.Address.City !== undefined) {
            cityName = location.Location.Address.City;
            if (cityName !== districtName && districtName.indexOf(cityName) < 0) {
                contextText = contextText + ", " + location.Location.Address.City;
            }
            $("#cityText").val(cityName);
        }
        if (location.Location.Address.PostalCode !== undefined) {
            postalCode = location.Location.Address.PostalCode;
            $("#postalCodeText").val(postalCode);
        }
        if (location.Location.Address.County !== undefined) {
            countyName = location.Location.Address.County;
            if (countyName !== cityName && cityName.indexOf(countyName) < 0 && countyName.indexOf(cityName) < 0) {
                contextText = contextText + ", " + location.Location.Address.County;
            }
            $("#countyText").val(countyName);
        }
        if (location.Location.Address.State !== undefined) {
            stateName = location.Location.Address.State;
            if (stateName !== cityName && stateName !== countyName) {
                contextText = contextText + ", " + location.Location.Address.State;
            }
            $("#stateText").val(stateName);
        }
        if (location.Location.Address.AdditionalData[0].value !== undefined) {
            contextText = contextText + ", " + location.Location.Address.AdditionalData[0].value;
            $("#countryText").val(location.Location.Address.AdditionalData[0].value);
        }
        contextText = contextText.replace(/(^,)|(,$)/g, "").trim();
        
        ui.addBubble(new H.ui.InfoBubble({
            lat: location.Location.DisplayPosition.Latitude,
            lng: location.Location.DisplayPosition.Longitude
        }, { content:  contextText }));
    };

    function geoFindMe() {
        let output = document.getElementById("out");

        if (!navigator.geolocation){
            output.innerHTML = "<p>Geolocation is not supported by your browser</p>";
            return;
        }

        function success(position) {
            let latitude  = position.coords.latitude;
            let longitude = position.coords.longitude;
            output.innerHTML = '<p>Latitude: ' + latitude + '°, Longitude: ' + longitude + '° copied to the form below.</p>';
            let zoomLevel = 14;
            map.setZoom(zoomLevel, true);
            map.setCenter({lat: latitude, lng: longitude}, true);
            let geocoder = platform.getGeocodingService();
            let reverseGeocodingParameters = {
                prox: latitude + ', ' + longitude + ', 32',
                mode: 'retrieveAddresses',
                maxresults: 1
            };
            geocoder.reverseGeocode(
                reverseGeocodingParameters,
                onGeoSuccess,
                function (e) { console.log('Error in Reverse Geocode: ' + e); }
            );
            $("#latitudeText").val(latitude);
            $("#longitudeText").val(longitude);
            
        }

        function error() {
            output.innerHTML = "Unable to retrieve your location";
        }

        output.innerHTML = "<p>Locating…</p>";

        navigator.geolocation.getCurrentPosition(success, error);
    }


</script>