@using KinaUnaWeb.Services
@using KinaUna.Data
@model KinaUnaWeb.Models.ItemViewModels.LocationViewModel
@inject ILocaleManager LocaleManager
@{
    ViewData["Title"] = await LocaleManager.GetTranslation("Edit location", PageNames.Locations, Model.LanguageId);
}
@section Scripts{
    <link rel="stylesheet" href="https://cdn.jsdelivr.net/npm/zebra_datepicker/dist/css/bootstrap/zebra_datepicker.min.css">
    <link href="/css/amsify.suggestags.css" rel="stylesheet" />
    <script src="/lib/jquery.amsify.suggestags.js"></script>
    <script src="/lib/moment.min.js"></script>
    <script src="/lib/material-kit/plugins/jasny-bootstrap.min.js"></script>
    <script src="https://cdn.jsdelivr.net/npm/zebra_datepicker/dist/zebra_datepicker.min.js"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-core.js" type="text/javascript" charset="utf-8"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-service.js" type="text/javascript" charset="utf-8"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-mapevents.js" type="text/javascript" charset="utf-8"></script>
    <script src="https://js.api.here.com/v3/3.1/mapsjs-ui.js" type="text/javascript" charset="utf-8"></script>
    <link rel="stylesheet" type="text/css" href="https://js.api.here.com/v3/3.1/mapsjs-ui.css"/>
}
<
<div class="ml-xl-auto mr-xl-auto col-xxl-11 col-xxxl-10">
    <div class="add-item-container">
        <h2 class="col-12">@ViewData["Title"]</h2>
        <div class="space-20"></div>
        <form asp-action="EditLocation" role="form" method="post" enctype="multipart/form-data">
            <div class="form-group">
                <label asp-for="LocationItem.Name" class="col-auto control-label">@await LocaleManager.GetTranslation("Name or label", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="nameText" asp-for="LocationItem.Name" value="@Model.LocationItem.Name" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.StreetName" class="col-auto control-label">@await LocaleManager.GetTranslation("Street", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="streetText" asp-for="LocationItem.StreetName" value="@Model.LocationItem.StreetName" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.HouseNumber" class="col-auto control-label">@await LocaleManager.GetTranslation("House number", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="houseNumberText" asp-for="LocationItem.HouseNumber" value="@Model.LocationItem.HouseNumber" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.District" class="col-auto control-label">@await LocaleManager.GetTranslation("District", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="disctrictText" asp-for="LocationItem.District" value="@Model.LocationItem.District" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.City" class="col-auto control-label">@await LocaleManager.GetTranslation("City", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="cityText" asp-for="LocationItem.City" value="@Model.LocationItem.City" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.PostalCode" class="col-auto control-label">@await LocaleManager.GetTranslation("Postal code", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="postalCodeText" asp-for="LocationItem.PostalCode" value="@Model.LocationItem.PostalCode" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.County" class="col-auto control-label">@await LocaleManager.GetTranslation("County", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="countyText" asp-for="LocationItem.County" value="@Model.LocationItem.County" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.State" class="col-auto control-label">@await LocaleManager.GetTranslation("State/region", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="stateText" asp-for="LocationItem.State" value="@Model.LocationItem.State" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.Country" class="col-auto control-label">@await LocaleManager.GetTranslation("Country", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="countryText" asp-for="LocationItem.Country" value="@Model.LocationItem.Country" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.Latitude" class="col-auto control-label">@await LocaleManager.GetTranslation("Latitude", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="latitudeText" asp-for="LocationItem.Latitude" value="@Model.LocationItem.Latitude" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.Longitude" class="col-auto control-label">@await LocaleManager.GetTranslation("Longitude", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="longitudeText" asp-for="LocationItem.Longitude" value="@Model.LocationItem.Longitude" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.Date" class="col-auto control-label">@await LocaleManager.GetTranslation("Date", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <div class="input-group date">
                        @{
                            string dateValue = "";
                            if (Model.LocationItem.Date.HasValue)
                            {
                                dateValue = Model.LocationItem.Date.Value.ToString("dd-MMM-yyyy HH:mm");
                            }
                        }
                        <input id="datetimepicker1" data-format="dd-MMM-yyyy HH:mm" type="text" class="form-control" data-zdp_readonly_element="false" asp-for="LocationItem.Date" value="@dateValue" />
                    </div>
                </div>
            </div>
            <script type="text/javascript">
                $(function () {
                    $('#datetimepicker1').Zebra_DatePicker({
                        format: 'd-M-Y H:i',
                        open_icon_only: true
                    });
                });
            </script>
            <div class="form-group">
                <label asp-for="LocationItem.Notes" class="col-auto control-label">@await LocaleManager.GetTranslation("Notes", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input asp-for="LocationItem.Notes" value="@Model.LocationItem.Notes" class="form-control" />
                </div>
            </div>
            <div class="form-group">
                <label class="col-auto control-label">@await LocaleManager.GetTranslation("Tags", PageNames.Locations, Model.LanguageId)</label>
                <div class="col-auto">
                    <input id="tagList" type="text" asp-for="LocationItem.Tags" value="@Model.LocationItem.Tags" placeholder="Add tag..." class="form-control" />
                </div>
                <script>
                $('input[id="tagList"').amsifySuggestags({
                    suggestions: @Html.Raw(Model.TagsList)
                                        });
                </script>
            </div>
            <div class="form-group">
                <label asp-for="LocationItem.AccessLevel" class="col-auto control-label">@await LocaleManager.GetTranslation("Access level", PageNames.AccessManagement, Model.LanguageId)</label>
                <div class="col-auto">
                    <select class="selectpicker form-control-noline" data-style="btn-kinaunaselect" data-size="@Model.AccessLevelListEn.Count" asp-for="LocationItem.AccessLevel" asp-items="@Model.AccessLevelListEn"></select>
                </div>
            </div>
            <div>
                <div class="form-group">
                    <input asp-for="LocationItem.LocationId" type="text" value="@Model.LocationItem.LocationId" hidden="hidden" />
                    <input asp-for="LocationItem.ProgenyId" value="@Model.LocationItem.ProgenyId" hidden="hidden" />
                    <div class="col-auto control-label"></div>
                    <div class="col-auto">
                        <button class="btn btn-success leavePage" type="submit">@await LocaleManager.GetTranslation("Save", PageNames.AddItem, Model.LanguageId)</button>
                        <a class="btn btn-danger leavePage" asp-controller="Locations" asp-action="Index">@await LocaleManager.GetTranslation("Cancel", PageNames.AddItem, Model.LanguageId)</a>
                    </div>
                </div>
            </div>
        </form>
        <div>@await LocaleManager.GetTranslation("Click on the map below to get location information.", PageNames.Locations, Model.LanguageId)</div>
        <div style="width: 100%; height: 480px" id="mapContainer"></div>
    </div>
</div>
<script>
    function setUpClickListener(map) {
        map.addEventListener('tap', function (evt) {
            let zoomLevel = map.getZoom() + 1;
            if (zoomLevel > 20) {
                zoomLevel = 20;
            }
            map.setZoom(zoomLevel, true);
            let coord = map.screenToGeo(evt.currentPointer.viewportX,
                evt.currentPointer.viewportY);
            map.setCenter(coord, true);

            let geocoder = platform.getGeocodingService();
            let reverseGeocodingParameters = {
                prox: coord.lat +', ' + coord.lng + ', 32',
                mode: 'retrieveAddresses',
                maxresults: 1
            };
            geocoder.reverseGeocode(
                reverseGeocodingParameters,
                onGeoSuccess,
                function (e) { console.log('Error in Reverse Geocode: ' + e); }
            );
            $("#latitudeText").val(coord.lat);
            $("#longitudeText").val(coord.lng);
        });
    }

    let platform = new H.service.Platform({
        'apikey': '@Constants.HereMapsApiKey',
        'useHTTPS': true
    });

    let pixelRatio = window.devicePixelRatio || 1;
    let maptypes = platform.createDefaultLayers({
        tileSize: pixelRatio === 1 ? 256 : 512,
        ppi: pixelRatio === 1 ? undefined : 320
    });
    
    let map = new H.Map(document.getElementById('mapContainer'),
        maptypes.vector.normal.map,
        {
            zoom: 3,
            center: { lng: @Model.LocationItem.Longitude, lat: @Model.LocationItem.Latitude },
            pixelRatio: pixelRatio
        });

    let ui = H.ui.UI.createDefault(map, maptypes);
    let behavior = new H.mapevents.Behavior(new H.mapevents.MapEvents(map));

        
    setUpClickListener(map);
    
    function onGeoSuccess(result) {
        let location = result.Response.View[0].Result[0];
        let contextText = "";
        let streetName = "";
        let houseNumber = "";
        let districtName = "";
        let cityName = "";
        let postalCode = "";
        let countyName = "";
        let stateName = "";
        if (location.Location.Address.Street !== undefined) {
            streetName = location.Location.Address.Street;
            contextText = contextText + location.Location.Address.Street;
            $("#streetText").val(streetName);
        }
        if (location.Location.Address.HouseNumber !== undefined) {
            houseNumber = location.Location.Address.HouseNumber;
            contextText = contextText + location.Location.Address.HouseNumber;
            $("#houseNumberText").val(houseNumber);
        }
        if (location.Location.Address.District !== undefined) {
            districtName = location.Location.Address.District;
            if (districtName !== streetName) {
                contextText = contextText + " " + location.Location.Address.District;
            }
            $("#districtText").val(districtName);
        }
        if (location.Location.Address.City !== undefined) {
            cityName = location.Location.Address.City;
            if (cityName !== districtName && districtName.indexOf(cityName) < 0) {
                contextText = contextText + ", " + location.Location.Address.City;
            }
            $("#cityText").val(cityName);
        }
        if (location.Location.Address.PostalCode !== undefined) {
            postalCode = location.Location.Address.PostalCode;
            $("#postalCodeText").val(postalCode);
        }
        if (location.Location.Address.County !== undefined) {
            countyName = location.Location.Address.County;
            if (countyName !== cityName && cityName.indexOf(countyName) < 0 && countyName.indexOf(cityName) < 0) {
                contextText = contextText + ", " + location.Location.Address.County;
            }
            $("#countyText").val(countyName);
        }
        if (location.Location.Address.State !== undefined) {
            stateName = location.Location.Address.State;
            if (stateName !== cityName && stateName !== countyName) {
                contextText = contextText + ", " + location.Location.Address.State;
            }
            $("#stateText").val(stateName);
        }
        if (location.Location.Address.AdditionalData[0].value !== undefined) {
            contextText = contextText + ", " + location.Location.Address.AdditionalData[0].value;
            $("#countryText").val(location.Location.Address.AdditionalData[0].value);
        }
        contextText = contextText.replace(/(^,)|(,$)/g, "").trim();

        ui.addBubble(new H.ui.InfoBubble({
            lat: location.Location.DisplayPosition.Latitude,
            lng: location.Location.DisplayPosition.Longitude
        }, { content:  contextText }));
    };
</script>