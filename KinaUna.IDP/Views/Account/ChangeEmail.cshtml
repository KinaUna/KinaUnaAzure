@using KinaUna.Data
@using KinaUna.IDP.Services
@model KinaUna.IDP.Models.ChangeEmailViewModel
@inject ILocaleManager LocaleManager
@{
    int languageId = LocaleManager.GetLanguageId(Context.Request);
    ViewData["Title"] = await LocaleManager.GetTranslation("Change email", PageNames.Account, languageId);
}
<h2>@ViewData["Title"]</h2>
<div class="row">
    <div class="col-md-10">
        <form asp-action="SendConfirmationMail" method="post">
            <div class="form-group">
                <label asp-for="OldEmail">@await LocaleManager.GetTranslation("Old email", PageNames.Account, languageId)</label>
                <div class="input-group">
                    <input asp-for="OldEmail" class="form-control" value="@Model.OldEmail" readonly="readonly" />
                </div>
                @if (!String.IsNullOrEmpty(Model.ErrorMessage))
                {
                    <div class="text-danger">@Model.ErrorMessage</div>
                }
            </div>
            <div class="form-group">
                <label asp-for="NewEmail">@await LocaleManager.GetTranslation("New email", PageNames.Account, languageId)</label>
                <div class="input-group">
                    <input asp-for="NewEmail" class="form-control" value="@Model.NewEmail" />
                </div>
            </div>
            <input asp-for="Language" value="en" hidden="hidden" />
            <input asp-for="UserId" value="@Model.UserId" hidden="hidden" />
            <input asp-for="Client" value="@Model.Client" hidden="hidden" />
            <button type="submit" class="btn btn-success leavePage">@await LocaleManager.GetTranslation("Send verification email", PageNames.Account, languageId)</button>
        </form>
    </div>
</div>

