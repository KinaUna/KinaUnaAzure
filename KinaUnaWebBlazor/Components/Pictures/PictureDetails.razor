@using KinaUnaWebBlazor.Models.ItemViewModels
@using KinaUnaWebBlazor.Services
@using KinaUna.Data.Models
@using KinaUnaWebBlazor.Models.HomeViewModels
@inject UserStateService UserStateService
@inject ImageStore ImageStore
@implements IDisposable

@if(PictureViewModel != null){
    <Div>
        <img src="@_pictureUrl" style="width: auto; height: auto; max-width: 100%; max-height: 90vh;"/>
        <Div Margin="Margin.Is2">
            @if (_tagsList.Any())
            {
                foreach (string tagString in _tagsList)
                {
                    <Badge Margin="Margin.Is1" Style="background-color: #e91e63;">@tagString</Badge>
                }
            }
        </Div>
        <PictureAgeData CurrentPictureTime="@PictureViewModel.PictureTime" Progeny="Progeny"></PictureAgeData>
        <PictureLocationData LocationDataViewModel="@LocationDataViewModel"></PictureLocationData>
    </Div>
}

@code {
    [Parameter]
    public PictureViewModel? PictureViewModel { get; set; }

    private string _pictureUrl = "";
    private List<string> _tagsList = [];
    Progeny? Progeny { get; set; }
    UserInfo? UserInfo { get; set; }
    LocationDataViewModel? LocationDataViewModel { get; set; }

    protected override void OnInitialized()
    {
        UserStateService.CurrentProgenyChanged += UserStateServiceOnCurrentProgenyChanged;
        UserStateService.CurrentUserChanged += UserStateServiceOnCurrentUserChanged;
        Progeny = UserStateService.CurrentProgeny;
        UserInfo = UserStateService.CurrentUser;
    }

    protected override void OnParametersSet()
    {
        if (PictureViewModel == null) return;
        Progeny = PictureViewModel?.Progeny;
        UpdateImage();
    }

    private void UpdateImage()
    {
        UserInfo = UserStateService.CurrentUser;
        if (Progeny != null && UserInfo != null && !string.IsNullOrEmpty(PictureViewModel?.PictureLink))
        {

            if (!string.IsNullOrEmpty(PictureViewModel?.PictureLink))
            {
                _pictureUrl = ImageStore.UriFor(PictureViewModel.PictureLink);
                if (!string.IsNullOrEmpty(PictureViewModel.Tags))
                {
                    _tagsList = PictureViewModel.Tags.Trim(',').Split(',').ToList();
                }

                if (!string.IsNullOrEmpty(PictureViewModel.Location))
                {
                    LocationDataViewModel = new LocationDataViewModel();
                    LocationDataViewModel.Location = PictureViewModel.Location;
                    if(!string.IsNullOrEmpty(PictureViewModel.Latitude)){
                        LocationDataViewModel.Latitude = PictureViewModel.Latitude;
                        bool latitudeParsed = double.TryParse(LocationDataViewModel.Latitude, out double latitude);
                        if (latitudeParsed)
                        {
                            LocationDataViewModel.LatitudeDouble = latitude;
                        }
                    }
                    if(!string.IsNullOrEmpty(PictureViewModel.Longitude)){
                        LocationDataViewModel.Longitude = PictureViewModel.Longitude;
                        bool longitudeParsed = double.TryParse(LocationDataViewModel.Longitude, out double longitude);
                        if (longitudeParsed)
                        {
                            LocationDataViewModel.LongitudeDouble = longitude;
                        }
                    }

                    if (!string.IsNullOrEmpty(PictureViewModel.Altitude))
                    {
                        LocationDataViewModel.Altitude = PictureViewModel.Altitude;
                        bool altitudeParsed = double.TryParse(LocationDataViewModel.Altitude, out double altitude);
                        if (altitudeParsed)
                        {
                            LocationDataViewModel.AltitudeDouble = altitude;
                        }
                    }
                }
                
                StateHasChanged();
            }
        }
    }

    private void UserStateServiceOnCurrentProgenyChanged(object? sender, Progeny e)
    {
        if (e.Id > 0)
        {
            Progeny = e;
            StateHasChanged();
        }
    }

    private void UserStateServiceOnCurrentUserChanged(object? sender, UserInfo e)
    {
        if (UserInfo?.Id != e.Id)
        {
            UserInfo = e;
            StateHasChanged();
        }
    }

    public void Dispose()
    {
        UserStateService.CurrentProgenyChanged -= UserStateServiceOnCurrentProgenyChanged;
        UserStateService.CurrentUserChanged -= UserStateServiceOnCurrentUserChanged;
    }
}
