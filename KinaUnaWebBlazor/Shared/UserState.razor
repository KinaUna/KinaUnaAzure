@using KinaUnaWebBlazor.Services
@using System.Security.Claims
@using KinaUna.Data
@inject IProgenyManager ProgenyManager
@inject IAuthorizationService AuthorizationService
@inject UserStateService UserStateService

<CascadingValue Value="this">
    @ChildContent
</CascadingValue>
@code {

    [Parameter]
    public RenderFragment? ChildContent { get; set; }

    [CascadingParameter]
    private Task<AuthenticationState>? AuthenticationStateTask { get; set; }

    private string _userEmail = Constants.DefaultUserEmail;


    public string UserEmail { 
        get => _userEmail;
        set => _userEmail = value;
    }

    public async Task<string> GetUserEmail()
    {
        string userEmail = Constants.DefaultUserEmail;
        if(AuthenticationStateTask != null){
            ClaimsPrincipal user = (await AuthenticationStateTask).User;
            userEmail = user.FindFirst("email")?.Value ?? Constants.DefaultUserEmail;

        }

        if (userEmail.ToUpper() != _userEmail.ToUpper())
        {
            await UserStateService.SetUser(userEmail);
            StateHasChanged();

        }

        UserEmail = userEmail;
        return userEmail;
    }
    
    protected override async Task OnParametersSetAsync()
    {
        await GetUserEmail();
    }

}
